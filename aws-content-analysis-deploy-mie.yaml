AWSTemplateFormatVersion: "2010-09-09"
Description: AWS Content Analysis - Deploys the AWS Content Analysis Application and the required Media Insights Engine Framework

Parameters:
  MieVersion:
    Type: String
    Description: The version of the Media Insights Engine framework to deploy
    Default: "isolated"
    AllowedValues : ["isolated"]
  AdminEmail:
    Description: Email address of the Content Analysis Administrator
    Type: String
  ElasticSearchNodeSize:
    Description: "The node type to be provisioned for the Elasticsearch cluster"
    Type: String
    Default: "t2.small.elasticsearch"
    AllowedValues:
      - "t2.small.elasticsearch"
      - "m4.large.elasticsearch"
      - "m4.xlarge.elasticsearch"
      - "c4.large.elasticsearch"
      - "c4.xlarge.elasticsearch"
      - "r4.large.elasticsearch"
      - "r4.xlarge.elasticsearch"
  DeployTestWorkflow:
    Description: Deploy test workflow which contains operator, stage, and workflow stubs for integration testing
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No

Mappings:
  ContentAnalysisApp:
    SourceCode:
      S3Bucket:  "mas-build-test-us-west-2"
      #CodeKeyPrefix: "media-insights-solution/frontend/code"
      TemplateKeyPrefix: "media-insights-solution/frontend/cf"
      WebsitePrefix: "media-insights-solution/frontend/code/website"

#      S3Bucket:  "%%BUCKET_NAME%%"
#      #CodeKeyPrefix: "media-insights-solution/%%VERSION%%/code"
#      TemplateKeyPrefix: "media-insights-solution/%%VERSION%%/cf"
#      WebsitePrefix: "media-insights-solution/%%VERSION%%/code/website"

Resources:
  # sourceCodeKey = sourceCodePrefix.replace("%%MIE_VERSION%%", version)
  # sourceCodePrefix = resourceProperties["MieSourceCodeKeyPrefix"]
  # "codePrexfix": sourceCodeKey,

  # Custom resources

#  WebsiteHelperRole:
#    Type: AWS::IAM::Role
#    Metadata:
#      cfn_nag:
#        rules_to_suppress:
#          - id: W11
#            reason: "Website helper Lambda requires ability to read / write to both MIE website bucket and MIE build bucket"
#    DependsOn: MediaInsightsWebsiteBucket
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#          - Effect: Allow
#            Principal:
#              Service:
#                - lambda.amazonaws.com
#            Action:
#              - sts:AssumeRole
#      Policies:
#        - PolicyName: !Sub "${AWS::StackName}-WebsiteHelperS3Access"
#          PolicyDocument:
#            Statement:
#              - Effect: Allow
#                Action:
#                  - "s3:GetObject"
#                  - "s3:PutObject"
#                  - "s3:ListBucket"
#                Resource:
#                  - !Sub ${MediaInsightsWebsiteBucket.Arn}/*
#                  - Fn::Sub:
#                      - arn:aws:s3:::${websitecode}/*
#                      - websitecode: !FindInMap ["ContentAnalysisApp", "SourceCode", "S3Bucket"]
#              - Effect: Allow
#                Action:
#                  - "s3:ListBucket"
#                Resource:
#                  - !Sub ${MediaInsightsWebsiteBucket.Arn}
#                  - Fn::Sub:
#                      - arn:aws:s3:::${websitecode}
#                      - websitecode: !FindInMap ["ContentAnalysisApp", "SourceCode", "S3Bucket"]
#              - Effect: Allow
#                Action:
#                  - "logs:CreateLogGroup"
#                  - "logs:CreateLogStream"
#                  - "logs:PutLogEvents"
#                Resource:
#                  - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*"
#
#  WebsiteDeployHelper:
#    Type: AWS::Lambda::Function
#    Properties:
#      Code:
#        S3Bucket: !FindInMap ["ContentAnalysisApp", "SourceCode", "S3Bucket"]
#        S3Key:
#          !Join [
#            "/",
#            [
#            !FindInMap ["ContentAnalysisApp", "SourceCode", "CodeKeyPrefix"],
#            "websitehelper.zip",
#            ],
#          ]
#      Handler: website_helper.lambda_handler
#      MemorySize: 256
#      Role: !GetAtt WebsiteHelperRole.Arn
#      Runtime: python3.6
#      Timeout: 900
#      Environment:
#        Variables:
#          DataplaneEndpoint: !GetAtt MediaInsightsFrameworkStack.Outputs.DataplaneApiEndpoint
#          WorkflowEndpoint: !GetAtt MediaInsightsFrameworkStack.Outputs.WorkflowApiEndpoint
#          ElasticEndpoint: !GetAtt ContentAnalysisElasticsearchStack.Outputs.ElasticEndpoint
#          DataplaneBucket: !GetAtt MediaInsightsFrameworkStack.Outputs.DataplaneBucket
#          UserPoolId: !GetAtt # TODO: Get cognito stack working and pull this param from its output
#          IdentityPoolId: !GetAtt # TODO: Get cognito stack working and pull this param from its output
#          AwsRegion: !Ref AWS::Region
#          PoolClientId: !Ref # TODO: Get cognito stack working and pull this param from its output



  # Deploy MIE Framework

  MediaInsightsFrameworkStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://'
          - "mas-build-test-us-west-2"
          - .s3-
          - !Ref AWS::Region
          - '.amazonaws.com/'
          - 'media-insights-solution/'
          - !Ref MieVersion
          - "/cf"
          - "/media-insights-stack.template"
      Parameters:
        DeployTestWorkflow: !Ref DeployTestWorkflow

  # Deploy Auth stack

  ContentAnalysisAuthStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://'
          - !FindInMap
            - ContentAnalysisApp
            - SourceCode
            - S3Bucket
          - .s3-
          - !Ref AWS::Region
          - '.amazonaws.com/'
          - !FindInMap
            - ContentAnalysisApp
            - SourceCode
            - TemplateKeyPrefix
          - "/aws-content-analysis-auth.yaml"
      Parameters:
        AdminEmail: !Ref AdminEmail
        WorkflowAPIRestID: !GetAtt MediaInsightsFrameworkStack.Outputs.WorkflowApiRestID
        DataplaneAPIRestID: !GetAtt MediaInsightsFrameworkStack.Outputs.DataplaneApiRestID


  # Deploy Elasticsearch

  ContentAnalysisElasticsearchStack:
    Type: "AWS::CloudFormation::Stack"
    DependsOn:
      - MediaInsightsFrameworkStack
    Properties:
      TemplateURL: !Join
        - ''
        - - 'https://'
          - !FindInMap
            - ContentAnalysisApp
            - SourceCode
            - S3Bucket
          - .s3-
          - !Ref AWS::Region
          - '.amazonaws.com/'
          - !FindInMap
            - ContentAnalysisApp
            - SourceCode
            - TemplateKeyPrefix
          - "/aws-content-analysis-elasticsearch.yaml"
      Parameters:
        AnalyticsStreamArn: !GetAtt MediaInsightsFrameworkStack.Outputs.AnalyticsStreamArn
        MieDataplaneBucket: !GetAtt MediaInsightsFrameworkStack.Outputs.DataplaneBucket
        AllowedIAMRoleArn: !GetAtt ContentAnalysisAuthStack.Outputs.AdminRoleArn


  # Web application resources

#  MediaInsightsWebsiteBucket:
#    Type: AWS::S3::Bucket
#    DeletionPolicy: Retain
#    Properties:
#      AccessControl: LogDeliveryWrite
#      BucketName:
#        Fn::Transform:
#          Name: 'String'
#          Parameters:
#            InputString: !Sub "${AWS::StackName}-website"
#            Operation: Lower
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: AES256
#      WebsiteConfiguration:
#        IndexDocument: "index.html"
#        ErrorDocument: "index.html"
#      LoggingConfiguration:
#        DestinationBucketName:
#          Fn::Transform:
#            Name: 'String'
#            Parameters:
#              InputString: !Sub "${AWS::StackName}-website"
#              Operation: Lower
#        LogFilePrefix: "access_logs/"
#      LifecycleConfiguration:
#        Rules:
#          - Id: "Keep access log for 30 days"
#            Status: Enabled
#            Prefix: "access_logs/"
#            ExpirationInDays: 30
#            AbortIncompleteMultipartUpload:
#              DaysAfterInitiation: 1
#          - Id: "Keep cloudfront log for 30 days"
#            Status: Enabled
#            Prefix: "cf_logs/"
#            ExpirationInDays: 30
#            AbortIncompleteMultipartUpload:
#              DaysAfterInitiation: 1
#
#  WebBucketPolicy:
#    Type: AWS::S3::BucketPolicy
#    Properties:
#      Bucket: !Ref MediaInsightsWebsiteBucket
#      PolicyDocument:
#        Statement:
#          - Effect: Deny
#            Principal: "*"
#            Action: "*"
#            Resource: !Sub "arn:aws:s3:::${MediaInsightsWebsiteBucket}/*"
#            Condition:
#              Bool:
#                aws:SecureTransport: false
#
#  CopyWebSource:
#    DependsOn: MediaInsightsWebsiteBucket
#    Type: Custom::WebsiteDeployHelper
#    Properties:
#      ServiceToken: !GetAtt WebsiteDeployHelper.Arn
#      WebsiteCodeBucket: !FindInMap ["ContentAnalysisApp", "SourceCode", "S3Bucket"]
#      WebsiteCodePrefix: !FindInMap ["ContentAnalysisApp", "SourceCode", "WebsitePrefix"]
#      DeploymentBucket: !GetAtt MediaInsightsWebsiteBucket.DomainName
#
#  MediaInsightsOriginAccessIdentity:
#    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
#    Properties:
#      CloudFrontOriginAccessIdentityConfig:
#        Comment: !Sub "access-identity-${MediaInsightsWebsiteBucket}"
#
#  MediaInsightsWebsiteBucketPolicy:
#    Type: "AWS::S3::BucketPolicy"
#    Metadata:
#      cfn_nag:
#        rules_to_suppress:
#          - id: F16
#            reason: "website bucket policy requires a wildcard principal"
#    Properties:
#      Bucket:
#        Ref: "MediaInsightsWebsiteBucket"
#      PolicyDocument:
#        Statement:
#          - Effect: "Allow"
#            Action:
#              - "s3:GetObject"
#            Resource:
#              - !Sub "arn:aws:s3:::${MediaInsightsWebsiteBucket}/*"
#            Principal:
#              CanonicalUser: !GetAtt MediaInsightsOriginAccessIdentity.S3CanonicalUserId
#
#  MediaInsightsWebsiteDistribution:
#    Type: AWS::CloudFront::Distribution
#    Properties:
#      DistributionConfig:
#        Comment: "Website distribution for Media Insights Engine"
#        Logging:
#          Bucket: !Sub "${MediaInsightsWebsiteBucket}.s3.amazonaws.com"
#          Prefix: cf_logs/
#          IncludeCookies: true
#        Origins:
#          - Id: S3-solution-website
#            DomainName: !Sub "${MediaInsightsWebsiteBucket}.s3.${AWS::Region}.amazonaws.com"
#            S3OriginConfig:
#              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${MediaInsightsOriginAccessIdentity}"
#        DefaultCacheBehavior:
#          TargetOriginId: S3-solution-website
#          AllowedMethods:
#            - GET
#            - HEAD
#            - OPTIONS
#            - PUT
#            - POST
#            - DELETE
#            - PATCH
#          CachedMethods:
#            - GET
#            - HEAD
#            - OPTIONS
#          ForwardedValues:
#            QueryString: false
#          ViewerProtocolPolicy: redirect-to-https
#        DefaultRootObject: "index.html"
#        CustomErrorResponses:
#          - ErrorCode: 404
#            ResponsePagePath: "/index.html"
#            ResponseCode: 200
#          - ErrorCode: 403
#            ResponsePagePath: "/index.html"
#            ResponseCode: 200
#        IPV6Enabled: true
#        ViewerCertificate:
#          CloudFrontDefaultCertificate: true
#        Enabled: true
#        HttpVersion: 'http2'
#
#Outputs:
#  CloudfrontUrl:
#    Value: !Join ["", ["https://", !GetAtt MediaInsightsWebsiteDistribution.DomainName]]
